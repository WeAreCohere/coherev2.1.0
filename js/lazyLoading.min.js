"use strict";

//-------------------
// Lazy Load Sections
const revealSection = (entries, observer) => {
  const [entry] = entries;

  if (!entry.isIntersecting) return;

  entry.target.classList.remove("section--hidden");
  observer.unobserve(entry.target);
};

export const sectionObserver = new IntersectionObserver(revealSection, {
  root: null,
  threshold: 0.1,
});

//-------------------
// Lazy Load Images
const loadImage = (entries, observer) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      const img = entry.target;
      const actualSrc = img.dataset.src;

      // Create a new image to preload
      const imageLoader = new Image();

      imageLoader.onload = () => {
        // Image loaded successfully, update src
        img.src = actualSrc;
        img.classList.add("lazy-loaded");
        img.classList.remove("lazy-loading");
      };

      imageLoader.onerror = () => {
        // Handle failed images - keep placeholder or use fallback
        img.classList.add("lazy-error");
        img.classList.remove("lazy-loading");
        console.warn(`Failed to load image: ${actualSrc}`);
      };

      // Add loading class
      img.classList.add("lazy-loading");

      // Start loading the actual image
      imageLoader.src = actualSrc;

      // Unobserve this image
      observer.unobserve(img);
    }
  });
};

export const imgObserver = new IntersectionObserver(loadImage, {
  root: null,
  threshold: 0.1,
  rootMargin: "50px",
});
